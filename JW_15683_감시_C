#include <stdio.h>

int x, y, idx=1, answer = 10000, sum;

int tn[10];
int map[10][10];
int tmp[10][10];
int visit[10][10];
int cct[10][2];
int queue[100010][3];

int n1x[4] = { 0,1,0,-1 };
int n1y[4] = { 1,0,-1,0 };
int n2x[4] = { 0,0,-1,1 };
int n2y[4] = { -1,1,0,0 };
int n3x[6] = {-1,0,1,0,-1};
int n3y[6] = {0,1,0,-1,0};
int n4x[6] = { 0,-1,0,1,0,-1 };
int n4y[6] = {-1,0,1,0,-1,0 };
int dirx[5] = { 0,0,-1,1 };
int diry[5] = { 1,-1,0,0 };

void clr() {
    int i, j;

    for (i = 0; i < x; i++) {
        for (j = 0; j < y; j++) {
            if (map[i][j] == 0) sum++;
            map[i][j] = tmp[i][j];
            visit[i][j] = 0;
        }
    }
}

void bfs(int start) {
    int i, read = 0, write = 0, d, a, b,temp;

    a = cct[start][0];
    b = cct[start][1];
    d = map[a][b];

    if (d == 1) {
        if (a + n1x[tn[start]] < 0 || a + n1x[tn[start]] >= x || b + n1y[tn[start]] < 0 || b + n1y[tn[start]] >= y) {}
        else if (map[a + n1x[tn[start]]][b + n1y[tn[start]]] == 0){
            map[a + n1x[tn[start]]][b + n1y[tn[start]]] = 9;
            queue[write][0] = a + n1x[tn[start]];
            queue[write][1] = b + n1y[tn[start]];
            queue[write++][2] = tn[start];
        }
        else if(map[a + n1x[tn[start]]][b + n1y[tn[start]]]!=6) {
            queue[write][0] = a + n1x[tn[start]];
            queue[write][1] = b + n1y[tn[start]];
            queue[write++][2] = tn[start];
        }
            

        while (read != write) {
            int xx = queue[read][0];
            int yy = queue[read][1];
            int dd = queue[read++][2];

            if (xx + n1x[dd] < 0 || xx + n1x[dd] >= x || yy + n1y[dd] < 0 || yy + n1y[dd] >= y) continue;
            else if (map[xx + n1x[dd]][yy + n1y[dd]] == 0){
                map[xx + n1x[dd]][yy + n1y[dd]] = 9;
                queue[write][0] = xx + n1x[dd];
                queue[write][1] = yy + n1y[dd];
                queue[write++][2] = dd;
            }
            else if(map[xx + n1x[dd]][yy + n1y[dd]]!=6) {
                queue[write][0] = xx + n1x[dd];
                queue[write][1] = yy + n1y[dd];
                queue[write++][2] = dd;
            }
        }
    }
    if (d == 2) {
        if (tn[start] % 2 == 0) temp = 0;
        else temp = 2;
        for (i = temp; i <= temp+ 1; i++) {
            if (a + n2x[i] < 0 || a + n2x[i] >= x || b + n2y[i] < 0 || b + n2y[i] >= y) {}
            else if (map[a + n2x[i]][b + n2y[i]] == 0){
                map[a + n2x[i]][b + n2y[i]] = 9;
                queue[write][0] = a + n2x[i];
                queue[write][1] = b + n2y[i];
                queue[write++][2] = i;
            }
            else if(map[a + n2x[i]][b + n2y[i]]!=6){
                queue[write][0] = a + n2x[i];
                queue[write][1] = b + n2y[i];
                queue[write++][2] = i;
            }
        }

        while (read != write) {
            int xx = queue[read][0];
            int yy = queue[read][1];
            int dd = queue[read++][2];

            if (xx + n2x[dd] < 0 || xx + n2x[dd] >= x || yy + n2y[dd] < 0 || yy + n2y[dd] >= y) continue;
            else if (map[xx + n2x[dd]][yy + n2y[dd]] == 0){
                map[xx + n2x[dd]][yy + n2y[dd]] = 9;
                queue[write][0] = xx + n2x[dd];
                queue[write][1] = yy + n2y[dd];
                queue[write++][2] = dd;
            }
            else if(map[xx + n2x[dd]][yy + n2y[dd]]!=6){
                queue[write][0] = xx + n2x[dd];
                queue[write][1] = yy + n2y[dd];
                queue[write++][2] = dd;
            }
        }
    }
    if (d == 3) {
        for (i = tn[start]; i <= tn[start] + 1; i++) {
            if (a + n3x[i] < 0 || a + n3x[i] >= x || b + n3y[i] < 0 || b + n3y[i] >= y) {}
            else if (map[a + n3x[i]][b + n3y[i]] == 0){
                map[a + n3x[i]][b + n3y[i]] = 9;
                queue[write][0] = a + n3x[i];
                queue[write][1] = b + n3y[i];
                queue[write++][2] = i;
            }
            else if(map[a + n3x[i]][b + n3y[i]]!=6){
                queue[write][0] = a + n3x[i];
                queue[write][1] = b + n3y[i];
                queue[write++][2] = i;
            }
        }

        while (read != write) {
            int xx = queue[read][0];
            int yy = queue[read][1];
            int dd = queue[read++][2];

            if (xx + n3x[dd] < 0 || xx + n3x[dd] >= x || yy + n3y[dd] < 0 || yy + n3y[dd] >= y) continue;
            else if (map[xx + n3x[dd]][yy + n3y[dd]] == 0){
                map[xx + n3x[dd]][yy + n3y[dd]] = 9;
                visit[xx + n3x[dd]][yy + n3y[dd]]++;
                queue[write][0] = xx + n3x[dd];
                queue[write][1] = yy + n3y[dd];
                queue[write++][2] = dd;
            }
            else if (map[xx + n3x[dd]][yy + n3y[dd]]!=6) {
                queue[write][0] = xx + n3x[dd];
                queue[write][1] = yy + n3y[dd];
                queue[write++][2] = dd;
            }
        }


    }
    if (d == 4) {
        for (i = tn[start]; i <= tn[start] +2; i++) {
            if (a + n4x[i] < 0 || a + n4x[i] >= x || b + n4y[i] < 0 || b + n4y[i] >= y) {}
            else if (map[a + n4x[i]][b + n4y[i]] == 0) {
                map[a + n4x[i]][b + n4y[i]] = 9;
                queue[write][0] = a + n4x[i];
                queue[write][1] = b + n4y[i];
                queue[write++][2] = i;
            }
            else if (map[a + n4x[i]][b + n4y[i]]!=6){
                queue[write][0] = a + n4x[i];
                queue[write][1] = b + n4y[i];
                queue[write++][2] = i;
            }
            
        }

        while (read != write) {
            int xx = queue[read][0];
            int yy = queue[read][1];
            int dd = queue[read++][2];

            if (xx + n4x[dd] < 0 || xx + n4x[dd] >= x || yy + n4y[dd] < 0 || yy + n4y[dd] >= y) continue;
            else if (map[xx + n4x[dd]][yy + n4y[dd]] == 0) {
                map[xx + n4x[dd]][yy + n4y[dd]] = 9;
                queue[write][0] = xx + n4x[dd];
                queue[write][1] = yy + n4y[dd];
                queue[write++][2] = dd;
            }
            else if ( map[xx + n4x[dd]][yy + n4y[dd]]!=6) {
                queue[write][0] = xx + n4x[dd];
                queue[write][1] = yy + n4y[dd];
                queue[write++][2] = dd;
            }
        }

    }
    else if(d==5){
        for (i = 0; i < d - 1; i++) {
            if (a + dirx[i] < 0 || a + dirx[i] >= x || b + diry[i] < 0 || b + diry[i] >= y) continue;
            if (map[a + dirx[i]][b + diry[i]] == 0){
                map[a + dirx[i]][b + diry[i]] = 9;
                queue[write][0] = a + dirx[i];
                queue[write][1] = b + diry[i];
                queue[write++][2] = i;
            }
            else if (map[a + dirx[i]][b + diry[i]]!=6) {
                queue[write][0] = a + dirx[i];
                queue[write][1] = b + diry[i];
                queue[write++][2] = i;
            }
            
        }

        while (read != write) {
            int xx = queue[read][0];
            int yy = queue[read][1];
            int dd = queue[read++][2];

            if (xx + dirx[dd] < 0 || xx + dirx[dd] >= x || yy+ diry[dd] < 0 || yy+ diry[dd] >= y) continue;
            if (map[xx+ dirx[dd]][yy+ diry[dd]] == 0) {
                map[xx+ dirx[dd]][yy+ diry[dd]] = 9;
                queue[write][0] = xx+ dirx[dd];
                queue[write][1] = yy+ diry[dd];
                queue[write++][2] = dd;
            }
            else if (map[xx+ dirx[dd]][yy+ diry[dd]] !=6) {
                queue[write][0] = xx+ dirx[dd];
                queue[write][1] = yy+ diry[dd];
                queue[write++][2] = dd;
            }
        }
    }
}

int main() {

    int i, j;
    scanf("%d %d", &x, &y);

    for (i = 0; i < x; i++) {
        for (j = 0; j < y; j++) {
            scanf("%d", &map[i][j]);
            tmp[i][j] = map[i][j];
            if (map[i][j] >= 1 && map[i][j] <= 5) {
                cct[idx][0] = i;
                cct[idx++][1] = j;
            }
        }
    }
    while(tn[idx]!=4){
        for (i = 1; i <idx; i++) {
            bfs(i);
        }
        clr();
        if (sum < answer) {
            answer = sum;
        }
        sum = 0;
        
        for(i=1;i<=idx;i++){
            tn[i]++;
            if((tn[i]==4 && i==idx) || tn[i]!=4) break;
            else tn[i]=0;
        }
    }
    printf("%d ", answer);

}
